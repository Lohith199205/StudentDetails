{"ast":null,"code":"\"use strict\";\n\nvar ng_redux_1 = require('../components/ng-redux');\n/**\n * Selects an observable from the store, and attaches it to the decorated\n * property.\n *\n * @param { PropertySelector | PathSelector | FunctionSelector } selector\n * An Rxjs selector function, property name string, or property name path\n * (array of strings/array indices) that locates the store data to be\n * selected\n *\n * @param { Comparator } comparer function for this selector\n */\nfunction select(selector, comparator) {\n  return function decorate(target, key) {\n    var bindingKey = selector;\n    if (!selector) {\n      bindingKey = key.lastIndexOf('$') === key.length - 1 ? key.substring(0, key.length - 1) : key;\n    }\n    function getter() {\n      return ng_redux_1.NgRedux.instance.select(bindingKey, comparator);\n    }\n    // Replace decorated property with a getter that returns the observable.\n    if (delete target[key]) {\n      Object.defineProperty(target, key, {\n        get: getter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\nexports.select = select;\n//# sourceMappingURL=select.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}